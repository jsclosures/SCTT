{"testname":"default","comments":"default","testsample":"default","testnotes":"YmFzZQ==","testdetailscript":"ZnVuY3Rpb24oY29tbWFuZExpbmUsY2FsbGJhY2spewoKdmFyIHNvbHJIb3N0ID0gQ09OVEVYVC5TT0xSSE9TVDsKICAgICAgICB2YXIgc29sclBvcnQgPSBDT05URVhULlNPTFJQT1JUOwogICAgICAgIHZhciBzb2xyUGF0aCA9ICIvc29sci92YWxpZGF0ZS9zZWxlY3Q/cT0qOioiOwogICAgICAgIAogICAgICAgIGxldCB0ZXN0TmFtZSA9ICJkZWZhdWx0IjsgCgogICAgICAgIGlmKCBjb21tYW5kTGluZS50ZXN0bmFtZSApCiAgICAgICAgICAgIHRlc3ROYW1lID0gYXJncy5xdWVyeU9iai50ZXN0bmFtZTsKICAgICAgICAKICAgICAgICBpZiggdGVzdE5hbWUgKXsKICAgICAgICAgICAgc29sclBhdGggKz0gIiZmcT10ZXN0bmFtZToiICsgdGVzdE5hbWU7CiAgICAgICAgfQogICAgICAgIHZhciBmaW5hbFJlc3VsdCA9IHtpdGVtczogW119OwoKICAgICAgICB2YXIgY29sbGVjdG9yQ0IgPSBmdW5jdGlvbihkYXRhKXsKICAgICAgICAgICAgaWYoIGRhdGEuaXRlbXMgKXsKICAgICAgICAgICAgICAgIHRoaXMucmVzdWx0Lml0ZW1zID0gdGhpcy5yZXN1bHQuaXRlbXMuY29uY2F0KGRhdGEuaXRlbXMpOwogICAgICAgICAgICAgICAgY29uc29sZS5sb2coImNvbmNhdCBpdGVtcyIsdGhpcy5yZXN1bHQsdGhpcyk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmKCB0aGlzLm5leHRFbnRyeSApCiAgICAgICAgICAgICAgICBDT05URVhULmxpYi5nZXRSRVNURGF0YSh7aG9zdDogc29sckhvc3QscG9ydDogc29sclBvcnQscGF0aDogdGhpcy5uZXh0RW50cnkucGF0aCx0eXBlOiB0aGlzLm5leHRFbnRyeS50eXBlLGNhbGxiYWNrOiB0aGlzLm5leHRFbnRyeS5jYWxsYmFjayxlbnRyeTogdGhpcy5uZXh0RW50cnl9KTsKICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgdGhpcy5jYWxsYmFjayh0aGlzLnJlc3VsdCk7CiAgICAgICAgfQogICAgICAgIHZhciBwYXRoTGlzdCA9IFsKICAgICAgICAgICAgICAgICAgICAgICAge3R5cGU6ICJxdWVyeSIsbGFiZWw6ICJTdW1tYXJ5TWF4UVRpbWVzIixmaWVsZDogInF0aW1lIixwYXRoOiBzb2xyUGF0aCArICImZnE9Y29udGVudHR5cGU6U1VNTUFSWSZyb3dzPTEmc29ydD1xdGltZStkZXNjIn0sCiAgICAgICAgICAgICAgICAgICAgICAgIHt0eXBlOiAicXVlcnkiLGxhYmVsOiAiU3VtbWFyeU1heFJvd0NvdW50IixmaWVsZDogInJvd2NvdW50IixwYXRoOiBzb2xyUGF0aCArICImZnE9Y29udGVudHR5cGU6U1VNTUFSWSZyb3dzPTEmc29ydD1yb3djb3VudCtkZXNjIn0sCiAgICAgICAgICAgICAgICAgICAgICAgIHt0eXBlOiAicXVlcnkiLGxhYmVsOiAiU3VtbWFyeU1pblFUaW1lIixmaWVsZDogInF0aW1lIixwYXRoOiBzb2xyUGF0aCArICImZnE9Y29udGVudHR5cGU6U1VNTUFSWSZyb3dzPTEmc29ydD1xdGltZSthc2MifSwKICAgICAgICAgICAgICAgICAgICAgICAge3R5cGU6ICJxdWVyeSIsbGFiZWw6ICJTdW1tYXJ5TWluUm93Q291bnQiLGZpZWxkOiAicm93Y291bnQiLHBhdGg6IHNvbHJQYXRoICsgIiZmcT1jb250ZW50dHlwZTpTVU1NQVJZJnJvd3M9MSZzb3J0PXJvd2NvdW50K2FzYyJ9LAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAge3R5cGU6ICJxdWVyeSIsbGFiZWw6ICJCZWZvcmVNYXhRVGltZSIsZmllbGQ6ICJxdGltZSIscGF0aDogc29sclBhdGggKyAiJmZxPWNvbnRlbnR0eXBlOkJFRk9SRSZyb3dzPTEmc29ydD1xdGltZStkZXNjIn0sCiAgICAgICAgICAgICAgICAgICAgICAgIHt0eXBlOiAicXVlcnkiLGxhYmVsOiAiQmVmb3JlTWF4Um93Q291bnQiLGZpZWxkOiAicm93Y291bnQiLHBhdGg6IHNvbHJQYXRoICsgIiZmcT1jb250ZW50dHlwZTpCRUZPUkUmcm93cz0xJnNvcnQ9cm93Y291bnQrZGVzYyJ9LAogICAgICAgICAgICAgICAgICAgICAgICB7dHlwZTogInF1ZXJ5IixsYWJlbDogIkFmdGVyTWF4UVRpbWUiLGZpZWxkOiAicXRpbWUiLHBhdGg6IHNvbHJQYXRoICsgIiZmcT1jb250ZW50dHlwZTpBRlRFUiZyb3dzPTEmc29ydD1xdGltZStkZXNjIn0sCiAgICAgICAgICAgICAgICAgICAgICAgIHt0eXBlOiAicXVlcnkiLGxhYmVsOiAiQWZ0ZXJNYXhSb3dDb3VudCIsZmllbGQ6ICJyb3djb3VudCIscGF0aDogc29sclBhdGggKyAiJmZxPWNvbnRlbnR0eXBlOkFGVEVSJnJvd3M9MSZzb3J0PXJvd2NvdW50K2Rlc2MifSwKICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICB7dHlwZTogInF1ZXJ5IixsYWJlbDogIkJlZm9yZU1pblFUaW1lIixmaWVsZDogInF0aW1lIixwYXRoOiBzb2xyUGF0aCArICImZnE9Y29udGVudHR5cGU6QkVGT1JFJnJvd3M9MSZzb3J0PXF0aW1lK2FzYyJ9LAogICAgICAgICAgICAgICAgICAgICAgICB7dHlwZTogInF1ZXJ5IixsYWJlbDogIkJlZm9yZU1pblJvd0NvdW50IixmaWVsZDogInJvd2NvdW50IixwYXRoOiBzb2xyUGF0aCArICImZnE9Y29udGVudHR5cGU6QkVGT1JFJnJvd3M9MSZzb3J0PXJvd2NvdW50K2FzYyJ9LAogICAgICAgICAgICAgICAgICAgICAgICB7dHlwZTogInF1ZXJ5IixsYWJlbDogIkFmdGVyTWluUVRpbWUiLGZpZWxkOiAicXRpbWUiLHBhdGg6IHNvbHJQYXRoICsgIiZmcT1jb250ZW50dHlwZTpBRlRFUiZyb3dzPTEmc29ydD1xdGltZSthc2MifSwKICAgICAgICAgICAgICAgICAgICAgICAge3R5cGU6ICJxdWVyeSIsbGFiZWw6ICJBZnRlck1pblJvd0NvdW50IixmaWVsZDogInJvd2NvdW50IixwYXRoOiBzb2xyUGF0aCArICImZnE9Y29udGVudHR5cGU6QUZURVImcm93cz0xJnNvcnQ9cm93Y291bnQrYXNjIn0sCiAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIHt0eXBlOiAiZmFjZXQiLHBhdGg6IHNvbHJQYXRoICsgIiZmYWNldC5maWVsZD1jb250ZW50dHlwZSZmYWNldD1vbiZmYWNldC5taW5jb3VudD0xJnJvd3M9MCJ9CiAgICAgICAgICAgICAgICAgICAgICAgIF07CiAgICAgICAgZm9yKGxldCBpID0gMDtpIDwgcGF0aExpc3QubGVuZ3RoO2krKyl7CiAgICAgICAgICAgIGlmKCBpKzEgPCBwYXRoTGlzdC5sZW5ndGggKQogICAgICAgICAgICAgICAgcGF0aExpc3RbaV0uY2FsbGJhY2sgPSBjb2xsZWN0b3JDQi5iaW5kKHthcmdzOiBjb21tYW5kTGluZSxyZXN1bHQ6IGZpbmFsUmVzdWx0LG5leHRFbnRyeTogcGF0aExpc3RbaSsxXSxjYWxsYmFjazogY2FsbGJhY2sgfSk7CiAgICAgICAgICAgIGVsc2UgICAgCiAgICAgICAgICAgICAgICBwYXRoTGlzdFtpXS5jYWxsYmFjayA9IGNvbGxlY3RvckNCLmJpbmQoe2FyZ3M6IGNvbW1hbmRMaW5lLHJlc3VsdDogZmluYWxSZXN1bHQsY2FsbGJhY2s6IGNhbGxiYWNrIH0pOwogICAgICAgIH0KCiAgICAgICAgY29uc29sZS5sb2coInNvbHJwYXRoIixwYXRoTGlzdFswXS5wYXRoKTsKICAgICAgICBDT05URVhULmxpYi5nZXRSRVNURGF0YSh7aG9zdDogc29sckhvc3QscG9ydDogc29sclBvcnQscGF0aDogcGF0aExpc3RbMF0ucGF0aCx0eXBlOiBwYXRoTGlzdFswXS50eXBlLGNhbGxiYWNrOiBwYXRoTGlzdFswXS5jYWxsYmFjayxlbnRyeTogcGF0aExpc3RbMF19KTsKCgp9","testharvestscript":"","testharvestscript_s":"username=search password= maxSize=10000000 sourceSolrHost=server1 sourceSolrCollection=collection1 outFileName=/tmp/out_solr.log","testcopyscript_s":"testName=siemens sourceSolrIdField=id sourceSolrHostA=server1 sourceSolrCollectionA=collection1 destinationSolrHostA=server2 destinationSolrCollectionA=collection2 sourceSolrHostB=server1 sourceSolrCollectionB=collection1 destinationSolrHostB=server2 destinationSolrCollectionB=collection2","testbuildscript":"","testbuildscript_s":"inFileName=/tmp/out_solr.log testName=siemens useAsSeed=true csvData= requiredTag=collection1","testextractscript":"","testextractscript_s":"testName=siemens sourceSolrCollectionB=validate sourceSolrCollectionA=validate","testinterpretscript":"ZnVuY3Rpb24oY29tbWFuZExpbmUpewogIGNvbnNvbGUubG9nKCJjb21tYW5kIixjb21tYW5kTGluZSk7CnZhciBwcm9maWxlTWFuYWdlciA9IGdldEN1cnJlbnRDb250ZXh0KCkuVUlQcm9maWxlTWFuYWdlcjsKICAgICAgICAgICAgCgkJCQlsZXQgc2VhcmNoQm94ID0gdGhpcy5zZWFyY2hCb3g7CgkJCQlsZXQgbWVzc2FnZUJveCA9IHRoaXMubWVzc2FnZUJveDsKCQkJCWxldCByZXN1bHRQYW5lbEEgPSB0aGlzLnJlc3VsdFBhbmVsQTsKCQkJCWxldCByZXN1bHRQYW5lbEIgPSB0aGlzLnJlc3VsdFBhbmVsQjsKCQkJCWxldCB0ZXN0ID0gdGhpcy50ZXN0OwoJCQkJCgkJCQlsZXQgYWxsRGF0YSA9IHt9OwoJCQkJCgkJCQlmdW5jdGlvbiBmaW5kTWF0Y2gocmVjLGtleTEsa2V5MixvdGhlckxpc3QpewoJCQkJCXZhciByZXN1bHQgPSAtMTsKCQkJCQlmb3IodmFyIGkgPSAwO2kgPCBvdGhlckxpc3QubGVuZ3RoO2krKyl7CgkJCQkJCWlmKCAocmVjW2tleTFdICYmIHJlY1trZXkxXSA9PT0gb3RoZXJMaXN0W2ldW2tleTFdKSB8fCAocmVjW2tleTJdICYmIHJlY1trZXkyXSA9PT0gb3RoZXJMaXN0W2ldW2tleTJdKSApewoJCQkJCQkJcmVzdWx0ID0gaTsKCQkJCQkJCWJyZWFrOwoJCQkJCQl9CgkJCQkJfQoJCQkJCgkJCQkJcmV0dXJuKCByZXN1bHQgKTsKCQkJCX0KCQkJCQoJCQkJbGV0IGNhbGxiYWNrID0gZnVuY3Rpb24oYXJncyxyZXNwKXsKCQkJCQljb25zb2xlLmxvZyhyZXNwKTsKCQkJCQlsZXQgcmVzdWx0UGFuZWxBID0gdGhpcy5yZXN1bHRQYW5lbEE7CgkJCQkJbGV0IHJlc3VsdFBhbmVsQiA9IHRoaXMucmVzdWx0UGFuZWxCOwoJCQkJCWxldCBpbnB1dCA9IHRoaXMuaW5wdXQ7CgkJCQkJbGV0IHNvdXJjZUEgPSAiQSI7CgkJCQkJbGV0IHNvdXJjZUIgPSAiQiI7CgkJCQkJbGV0IGNoYW5uZWwgPSB0aGlzLmNoYW5uZWw7CgkJCQkJCgkJCQkJV0lER0VURkFDVE9SWS5jbGVhckNoaWxkcmVuKHt3aWRnZXQ6IHJlc3VsdFBhbmVsQX0pOwoJCQkJCVdJREdFVEZBQ1RPUlkuY2xlYXJDaGlsZHJlbih7d2lkZ2V0OiByZXN1bHRQYW5lbEJ9KTsKCQkJCQkKCQkJCQlsZXQgZG9jcyA9IHJlc3AuaXRlbXM7CgkJCQkJCgkJCQkJaWYoIGRvY3MubGVuZ3RoID4gMCApewoJCQkJCQlhbGxEYXRhW3NvdXJjZUFdID0ge2RvY3M6IFtkb2NzWzBdXSxyZXN1bHRQYW5lbDogcmVzdWx0UGFuZWxBLHNvdXJjZTogc291cmNlQSxjaGFubmVsOiBjaGFubmVsfTsKCQkJCQkJYWxsRGF0YVtzb3VyY2VBXS5zb3VyY2UgPSBkb2NzWzBdLnNvdXJjZTsKCQkJCQl9CgkJCQkJZWxzZSB7CgkJCQkJCWFsbERhdGFbc291cmNlQV0gPSB7ZG9jczogW10scmVzdWx0UGFuZWw6IHJlc3VsdFBhbmVsQSxzb3VyY2U6IHNvdXJjZUEsY2hhbm5lbDogY2hhbm5lbH07CgkJCQkJfQoJCQkJCQoJCQkJCWlmKCBkb2NzLmxlbmd0aCA+IDEpewoJCQkJCQlhbGxEYXRhW3NvdXJjZUJdID0ge2RvY3M6IFtkb2NzWzFdXSxyZXN1bHRQYW5lbDogcmVzdWx0UGFuZWxCLHNvdXJjZTogc291cmNlQixjaGFubmVsOiBjaGFubmVsfTsKCQkJCQkJYWxsRGF0YVtzb3VyY2VCXS5zb3VyY2UgPSBkb2NzWzFdLnNvdXJjZTsKCQkJCQl9CgkJCQkJZWxzZSB7CgkJCQkJCWFsbERhdGFbc291cmNlQl0gPSB7ZG9jczogW10scmVzdWx0UGFuZWw6IHJlc3VsdFBhbmVsQixzb3VyY2U6IHNvdXJjZUIsY2hhbm5lbDogY2hhbm5lbH07CgkJCQkJfQoJCQkJCQoJCQkJCWxldCBkb25lID0gMDsKCgkJCQkJZm9yKHZhciBwIGluIGFsbERhdGEpewoJCQkJCQlpZiggYWxsRGF0YS5oYXNPd25Qcm9wZXJ0eShwKSApCgkJCQkJCQlkb25lKys7CgkJCQkJfQoJCQkJCQoJCQkJCWlmKCBkb25lID09IDIgKXsKCQkJCQkJbGV0IHNMaXN0ID0gW3NvdXJjZUEsc291cmNlQl07CgkJCQkJCWxldCBhTGlzdCA9IGFsbERhdGFbc291cmNlQV0uZG9jczsKCQkJCQkJbGV0IGJMaXN0ID0gYWxsRGF0YVtzb3VyY2VCXS5kb2NzOwoJCQkJCQkKCQkJCQkJbGV0IGxlZnRDb2xvciA9ICJncmVlbiI7CgkJCQkJCWxldCByaWdodENvbG9yID0gImdyZWVuIjsKCQkJCQkJbGV0IGFEb2NXaWRnZXQ7CgkJCQkJCWxldCBiRG9jV2lkZ2V0OwoJCQkJCQkKCQkJCQkJZm9yKGxldCBpIGluIGFMaXN0KXsKCQkJCQkJY29uc29sZS5sb2coImluZGV4IixpKTsKCQkJCQkJCQkKCQkJCQkJCWlmKCBpID09IDAgKXsKCQkJCQkJCQlhRG9jV2lkZ2V0ID0gV0lER0VURkFDVE9SWS5idWlsZFdpZGdldCh7d2hpY2g6ImRpdiIsaW5uZXJIVE1MOiBhTGlzdC5sZW5ndGggKyAoYUxpc3QubGVuZ3RoID4gMCA/ICIgZG9jcyBmb3VuZCBpbiAiICsgYWxsRGF0YVtzb3VyY2VBXS5zb3VyY2UgOiAiIikgfSk7CgkJCQkJCQkJY29uc29sZS5sb2coImFkb2MiLGFEb2NXaWRnZXQpOwoJCQkJCQkJCVdJREdFVEZBQ1RPUlkuYWRkV2lkZ2V0VG9Db250YWluZXIoe3BhcmVudDogYWxsRGF0YVtzb3VyY2VBXS5yZXN1bHRQYW5lbCxjaGlsZDogYURvY1dpZGdldH0pOwoJCQkJCQkJCQoJCQkJCQkJCWJEb2NXaWRnZXQgPSBXSURHRVRGQUNUT1JZLmJ1aWxkV2lkZ2V0KHt3aGljaDoiZGl2Iixpbm5lckhUTUw6IGJMaXN0Lmxlbmd0aCArIChiTGlzdC5sZW5ndGggPiAwID8gIiBkb2NzIGZvdW5kIGluICIgKyBhbGxEYXRhW3NvdXJjZUJdLnNvdXJjZSA6ICIiKSB9KTsKCQkJCQkJCQkKCQkJCQkJCQlXSURHRVRGQUNUT1JZLmFkZFdpZGdldFRvQ29udGFpbmVyKHtwYXJlbnQ6IGFsbERhdGFbc291cmNlQl0ucmVzdWx0UGFuZWwsY2hpbGQ6IGJEb2NXaWRnZXR9KTsKCQkJCQkJCX0KCQkJCQkJCQoJCQkJCQkJdmFyIG1hdGNoSW5kZXggPSBmaW5kTWF0Y2goYUxpc3RbaV0sImlkIiwiY3VzdG9tZXJfaWRfb3JkZXJfcHJvZHVjdF9pZCIsYkxpc3QpOwoJCQkJCQkJCgkJCQkJCQlpZiggbWF0Y2hJbmRleCA+IC0xICl7CgkJCQkJCQkJaWYoICBtYXRjaEluZGV4ICE9IGkgKXsKCQkJCQkJCQkJaWYoIG1hdGNoSW5kZXggPCBpICl7CgkJCQkJCQkJCQlsZWZ0Q29sb3IgPSAicmVkIjsKCQkJCQkJCQkJCXJpZ2h0Q29sb3IgPSAicmVkIjsKCQkJCQkJCQkJfQoJCQkJCQkJCQllbHNlIHsKCQkJCQkJCQkJCWxlZnRDb2xvciA9ICJncmVlbiI7CgkJCQkJCQkJCQlyaWdodENvbG9yID0gImdyZWVuIjsKCQkJCQkJCQkJfQoJCQkJCQkJCX0KCQkJCQkJCQllbHNlIHsKCQkJCQkJCQkJbGVmdENvbG9yID0gImdyZWVuIjsKCQkJCQkJCQkJcmlnaHRDb2xvciA9ICJncmVlbiI7CgkJCQkJCQkJfQoJCQkJCQkJfQoJCQkJCQkJZWxzZSB7CgkJCQkJCQkJbGVmdENvbG9yID0gInllbGxvdyI7CgkJCQkJCQkJcmlnaHRDb2xvciA9ICJ5ZWxsb3ciOwoJCQkJCQkJfQoJCQkJCQkJCQoJCQkJCQkJCgkJCQkJCQlsZXQgZW50cnlXaWRnZXRBID0gV0lER0VURkFDVE9SWS5idWlsZFdpZGdldCh7d2hpY2g6InVsIixpbm5lckhUTUw6ICJEb2N1bWVudCAiICsgaSxzdHlsZTogeyJiYWNrZ3JvdW5kLWNvbG9yIjogbGVmdENvbG9yfX0pOwoJCQkJCQkJV0lER0VURkFDVE9SWS5hZGRIYW5kbGVyKHt3aWRnZXQ6IGVudHJ5V2lkZ2V0QSxoYW5kbGVyOiBbe25hbWU6ICJjbGljayIsY2FsbGJhY2s6IGhhbmRsZUNsaWNrLmJpbmQoe2RvYzogYUxpc3RbaV0saW5wdXQ6IGlucHV0fSl9XX0pOwoJCQkJCQkJCQoJCQkJCQkJZm9yKGxldCBhIGluIGFMaXN0W2ldKXsKCQkJCQkJCQlpZiggIWEuc3RhcnRzV2l0aCgiXyIpICYmIFsiaWQiLCJjdXN0b21lcl9pZF9vcmRlcl9wcm9kdWN0X2lkIiwic2NvcmUiLCJxdGltZSIsInJvd2NvdW50IiwidG9wZG9jIiwicXVlcnlfdHh0Il0uaW5kZXhPZihhKSA+IC0xICl7CgkJCQkJCQkJCWxldCBhdHRyaWJ1dGVXaWRnZXQgPSBXSURHRVRGQUNUT1JZLmJ1aWxkV2lkZ2V0KHt3aGljaDoibGkiLGlubmVySFRNTDogYSArICI6ICIgKyBhTGlzdFtpXVthXX0pOwoJCQkJCQkJCQlXSURHRVRGQUNUT1JZLmFkZFdpZGdldFRvQ29udGFpbmVyKHtwYXJlbnQ6IGVudHJ5V2lkZ2V0QSxjaGlsZDogYXR0cmlidXRlV2lkZ2V0fSk7CgkJCQkJCQkJCQoJCQkJCQkJCX0KCQkJCQkJCX0KCQkJCQkJCVdJREdFVEZBQ1RPUlkuYWRkV2lkZ2V0VG9Db250YWluZXIoe3BhcmVudDogYURvY1dpZGdldCxjaGlsZDogZW50cnlXaWRnZXRBfSk7CgkJCQkJCQkKCQkJCQkJCWlmKCBpIDwgYkxpc3QubGVuZ3RoICl7CgkJCQkJCQkJbGV0IGVudHJ5V2lkZ2V0QiA9IFdJREdFVEZBQ1RPUlkuYnVpbGRXaWRnZXQoe3doaWNoOiJ1bCIsaW5uZXJIVE1MOiAiRG9jdW1lbnQgIiArIGksc3R5bGU6IHsiYmFja2dyb3VuZC1jb2xvciI6IHJpZ2h0Q29sb3J9fSk7CgkJCQkJCQkJV0lER0VURkFDVE9SWS5hZGRIYW5kbGVyKHt3aWRnZXQ6IGVudHJ5V2lkZ2V0QixoYW5kbGVyOiBbe25hbWU6ICJjbGljayIsY2FsbGJhY2s6IGhhbmRsZUNsaWNrLmJpbmQoe2RvYzogYkxpc3RbaV0saW5wdXQ6IGlucHV0fSl9XX0pOwoJCQkJCQkJCQkJCgkJCQkJCQkJZm9yKGxldCBhIGluIGJMaXN0W2ldKXsKCQkJCQkJCQkJaWYoICFhLnN0YXJ0c1dpdGgoIl8iKSAmJiBbImlkIiwiY3VzdG9tZXJfaWRfb3JkZXJfcHJvZHVjdF9pZCIsInNjb3JlIiwicXRpbWUiLCJyb3djb3VudCIsInRvcGRvYyIsInF1ZXJ5X3R4dCJdLmluZGV4T2YoYSkgPiAtMSApewoJCQkJCQkJCQkJbGV0IGF0dHJpYnV0ZVdpZGdldCA9IFdJREdFVEZBQ1RPUlkuYnVpbGRXaWRnZXQoe3doaWNoOiJsaSIsaW5uZXJIVE1MOiBhICsgIjogIiArIGJMaXN0W2ldW2FdfSk7CgkJCQkJCQkJCQlXSURHRVRGQUNUT1JZLmFkZFdpZGdldFRvQ29udGFpbmVyKHtwYXJlbnQ6IGVudHJ5V2lkZ2V0QixjaGlsZDogYXR0cmlidXRlV2lkZ2V0fSk7CgkJCQkJCQkJCX0KCQkJCQkJCQl9CgkJCQkJCQkJV0lER0VURkFDVE9SWS5hZGRXaWRnZXRUb0NvbnRhaW5lcih7cGFyZW50OiBiRG9jV2lkZ2V0LGNoaWxkOiBlbnRyeVdpZGdldEJ9KTsKCQkJCQkJCX0KCQkJCQkJfQoJCQkJCX0KCQkJCQkKCQkJCQlnZXRDdXJyZW50Q29udGV4dCgpLnNldEJ1c3koKTsKCQkJCX0KCQkJCQoJCQkJY29uc29sZS5sb2coc2VhcmNoQm94LG1lc3NhZ2VCb3gscmVzdWx0UGFuZWxBLHJlc3VsdFBhbmVsQik7CgkJCQlsZXQgaW5wdXQgPSBzZWFyY2hCb3gudmFsdWU7CgkJCQlnZXRDdXJyZW50Q29udGV4dCgpLnNldEJ1c3kodHJ1ZSwiQ09NUEFSRSIpOwkKCQkJCWxldCBuZXdDYWxsYmFjayA9IGNhbGxiYWNrLmJpbmQoe3BhcmVudDogY29udGFpbmVyLHJlc3VsdFBhbmVsQTogcmVzdWx0UGFuZWxBLHJlc3VsdFBhbmVsQjogcmVzdWx0UGFuZWxCLGlucHV0OiBpbnB1dCxzZWFyY2hCb3g6IHNlYXJjaEJveCx0ZXN0OiB0ZXN0fSk7CgkJCQlnZXRDdXJyZW50Q29udGV4dCgpLkNhY2hlTWFuYWdlci5nZXREYXRhKHtjb250ZW50dHlwZTogIkNPTVBBUkUiLHdpbmRvdzogd2luZG93LHF1ZXJ5OnsgY29udGVudHR5cGU6ICJDT01QQVJFIixwYXJlbnRpZDogaW5wdXQsdGVzdG5hbWU6IHRlc3QudGVzdG5hbWV9LGNhbGxiYWNrOiBuZXdDYWxsYmFjayxub2NhY2hlOiB0cnVlfSk7CQkJCQoKfQ==","testsummaryscript":"","testsummaryscript_s":"testName=siemens","id":"TEST1598994530023","contenttype":"TEST","crawldate":"2020-09-04T01:23:49.327Z","testcopyscript":""}